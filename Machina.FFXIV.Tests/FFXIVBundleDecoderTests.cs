// Copyright © 2021 Ravahn - All Rights Reserved
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY. without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see<http://www.gnu.org/licenses/>.

using System;
using Machina.Decoders;
using Machina.FFXIV.Tests.Utility;
using Machina.Headers;
using Machina.Infrastructure;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Machina.FFXIV.Tests
{
    [TestClass]
    public class FFXIVBundleDecoderTests
    {
        [TestCleanup]
        public void TestCleanup()
        {
            TestInfrastructure.Listener.Messages.Clear();
        }

        [TestMethod]
        public void FFXIVBundle_StoreData_OneBundle_OneMessage()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B8E");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);

            Assert.AreEqual(1, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }

        [TestMethod]
        public void FFXIVBundle_StoreData_OneBundle_Uncompressed()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("000000000000000000000000000000000000000000000000400000000000010000000000000000001800000000000000000000000800000014F82510AF57EB59");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);

            Assert.AreEqual(1, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }

        [TestMethod]
        public void FFXIVBundle_StoreData_OneBundle_TwoMessages()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475C07F4E3F5F01000073000000000002000101000000000000789C33606060F8DEA62C20F243558099617F8508832B2303832AC3BAF0D791402906D1890C0C07845E305BCA9C99EE95C4C060001403A9C5A5DEAB8381C1C6E50573AE0A443D0058D5177C");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);

            Assert.AreEqual(2, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }
        [TestMethod]
        public void FFXIVBundle_StoreData_TwoBundles()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("00000000000000000000000000000000000000000000000040000000000001000001000000000000789C936040000E863C6E911FAA026BC35F47020015E504235252A041FF5D46E27F2A644D7B99C475DF7C4E3F5F01000060000000000001000101000000000000789C3360606048DBA02220F243558099617F8508832B2303832AC3DAF0D7914029860BF10C0C37F95E309FE43C333D682A030300148F0CDA");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);

            Assert.AreEqual(2, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }

        [TestMethod]
        public void FFXIVBundle_StoreData_PartialBundle()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B"); // 8E removed from end

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);

            Assert.AreEqual(0, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);

            Tuple<long, byte[]> result = sut.GetNextFFXIVMessage();
            Assert.IsNull(result);

            // now, add data
            sut.StoreData(new byte[] { 0x83 });
            Assert.AreEqual(1, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }
        [TestMethod]
        public void FFXIVBundle_StoreData_FullAndPartialBundles()
        {
            byte[] data = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B8E");
            byte[] data2 = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B"); // 8E removed from end

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);
            sut.StoreData(data2);

            Assert.AreEqual(1, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }

        [TestMethod]
        public void FFXIVBundle_StoreData_SplitBundle()
        {
            /// note: did not update
            byte[] data = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C47553C04E4C5F010000E100000000000D000101000000000000789C736060601010677048FC2821C0CCA0D12DC2E0C2C8C02028B06DF5BB48A01483110376F046284700443B00B12019FA0D4332E1FA8528D06F00C4F344D30410FAE550F4EF286570B0C92B0D539A1DD299585C9C4948FD7612D56FC3A2FE7B7D3A4EF51FEA191CFCF25603D59B76D34BFD8F251938D50BD583DCFF285C69F6F12E98FABFF7B370AA3F0C561F04343F0DEE5FC54BD938D51FCD06B9A70F68FE2BB8FA4DE5B938D53F6803993F294C75F61AB07A0038379D0F5252A041FF5D46E27F2A644D7B99C475ACC04E4C5F0100006303000000001F000101000000000000789CED565F485361143FF7DE55E8DAFAFCB3D494B554D2CA484B4AEAD236B51443122CAB976C84CB9516E443F4927BAC993D44DA9F5124582F42A884FD2507110AF950E643E283F3C58D8AD28ACAFED139BB53F76DAE44A22C3C70EEEFBBFB7EE79E73CFF976CEB50340641C982CA3F14C82F4BA58300B0051ACA3E5F51EDC0287A8EC4BB8B66C13E064B257B27F201440849BA048AB99EC610692831ACDF9CFE5FC6BA7B07952D376E6577622AC181283ECD2FDCADB15898176E3620FE1F179691095FD401B5729605E82BD825B08BA9F4E5EC8FFABE82A16CE7FA3A8EC830120AB0EA0937925C282440116C0883F08839938FFA27F132AF99EF49FC7F9A7C356ECE7F6E8A6B6FFBA38B07E299C7D8A24A002C4DEE83212AFD02A9389BBAA6CBDF339BE4726DE5CEEB305F8D773F6E59D2A903DF1BBD39CEDA7367A147E6F5378FEB55A407E4E59B2B37A82FFF26D4558FEA88FAFD995EC3CE118E71775A802F85BF878F602F46BBD124B03889B21BFB5C71A96FFA8846ABB79C6FC7421B89ECB39BE6E58394F630601B276D898FE21C0A7E64AE62A04B8A2B3B2EF26A51E99190043DD56F600FFC8712FCA992B5589A37F19C0D8D34AB60E5186FDAC2511A0FD5835CB45AC8CD9C7744B00BE0D1E640309009A0D2A161183E7B6F810F368953CDDD128F56B542B711E9FA79C9F8518E5C7DA03AC0963BCBBD4E6C3D3186B2CBED32D4423E26D4413E23DC43CC4FB88F9885D88DB11BB114B101F239622F620F6A2F6A1AEC4FB0CD4B5A8D953E6298DCBD37CB45163DF11304FD49701F3A421C43C4511629EB48498A74584FF699EA8FF53BCE1FA3F8609181A5C90F8BE702EC4EE0B04DAA9FD3DDD82FA3E12A0193BD9A58B0946EA0D831EFC55005F3B93C4A3E0520124F9B8F6E9B4344ED401B383163FEB7563C21ADF2C1B890C7D4E6A767DC3552178567DE6DE0964D907349F6842053DC21D663D27BF411C7876A93EFC2CE5EB6390B7CA343B95395A90E8C5335B2D50B147CC403349D04FACCFE2A5E0DDB37CEA811EFF94A567BF112304E2F866F2A4B81BF152B169C04C7C9ACAF5E7F5219CBFB49E1532579FD95F1FFAD6A05914EE5B69A8164CF2E1EB3B573993EA2C3535B63FC1E76708CF1F36127F357EEB1D71CC46FE0F8E203E0D5252A041FF5D46E27F2A644D7B99C475AEC04E4C5F010000E1000000000016000101000000000000789C33606060C8104E1048FC2821C0CCA0D12DC220C7C8C02028B06DF5BB48A014C3537B06079B3CDD30A5D9F95D89C5C5990664A89F279A8653FDD65290FA52A0FA904E62D46FC6A2FE7B7D3A4EF51FEA191CFCF25603D59B760F56F53F9664E0542F540FF2EFA370A5D9C7BB06837AC10150FFF3226EF58FF783D4EF09D59F7D9428F58FA8A0FEEFFD2C9CEA0F83DD1F048CDFB44E62D41FC2A27E53792E4EF5F7DB40EA2785A9CE5E4394FABB24AABF83A61E007B222F195252A041FF5D46E27F2A644D7B99C475D5C04E4C5F010000CF02000000000F000101000000000000789CDD555F48535118FFDD6DC6D2D4E3CCCC0AFB43D48A552E1FEAA1F23A5F42B08C84E8A53F04E6CAA017898270F49268126296160946516054060D263D0C4752B1A2C417E9A1ED454744D44B2594EB777636DDD56938EAA1BEF1DDDF77CFB9BFFB7DE777CF77");
            byte[] data2 = ConversionUtility.HexStringToByteArray("E601905708FDE897A5C20C7BCB62946B1C11DEDE4F0739852B26354FD006EC40D39A88D9BF5F2202404DC5C543ED2EE05E2C062E31BE158FEF27C5727CCA169C9E0C750F2FB973E4EF32A979869AAFF4EFE49F6BFD6DF1F573503BB7F6CFE7DFCE4B9621BFCB903F07A9ED773C1336844DD338F6B81B7995A6645EC23C339E33EAD26452F3725F4C72BE6AD4C5125003ED893587541D520B756F8E81D445DD5B8C6586A42E76BE44E69ECABFCE90BF6014F868AB17E3AB34386BDCA2986FFF7EBB4EF87703DD05B5624207C2CF6BC5812DC0CD61B7287100851F0E0B3FBFE1A360AD18590D8CBFAD13A5C41D38267A97038FCF9C122E625DFE1151B00CF8F9FE84785704646FB38885F980B3EAA418E307A9F45A842F1B18EA718BAB59AACEB319C08F25D017B1CA6F8DC7450F6BEC5FE98E61336BB58D014F883B895EE22EA28F584EEC27BA88CF8855C441E21EE20BE23EE24B62903E441FA66FE49883BE953E53A7F5069D32F87CA6EC1FEA942D31A0F633A8538E443DDE5FFFB94E5CE6349D2A0C3AE5416DE43E7A64967E33F28DFDC66542EEEB159B8C3C797E1A791348E6C971C4F376D3EFF0F9EB5D4565B13EF9DC278B8AB58F190D7848ED72CFFBF054E689713C292A4D6D66AD01E3D6F4F9D2AA1FB4B45A9B1DE1BDD56D56BDECC2EBC4FD487D86B558531A4E44A3D137FD776FC8D846EFEC748483D72E5B4B9CAD1DF2F9CDEA3008CD2B7192F99BDCAFD2E5FECB96A9FE03550FA761D146F953B1DCCBB25767DBCB96A4333D6191D1C10EC993BD9D0E4F9E05F3E5FD02BDC874ED5252A041FF5D46E27F2A644D7B99C475D9C04E4C5F010000A5020000000012000101000000000000789CED944B6813511486CFCDC4125A8D538D545CB412506B75611131E02899FA46EDC6127555BB300F6C8B3416970908A5A654A43E36C15A6B7153C1A8A50B5742B03E1A17B5DDA89BE8222D8A355DF8DEF89F99A4C98D16340855E8819FEFE6CE794CCE3D735D44E45F7E5C6D9A59A92A54DDE5A03A4154AE0E0F4E1FC323B212092AB0A9D4C865177875225054DCDD332D45C57D0EF98A8AFB3AE6FFE3B83EEC9655903B17F78DF2E348D30C843F7178A7B32045F22FAD17EC17763A45B409EC5DE1CD3BD74AE95CEFB4935B6B6DF738A30DE79A82C100FBCBF323FBA743E4AE6F1D84FF96AEACFF9701FF9CFEE521CEFFE68833FA2892F5AF3D74724EFF19C37F15F20FCFE697BF03D9FF5507FBF778D6446F19EF1FC69E5D9A475DF28F58CCE73CCFF67A9EC829E5C161A6880B1A82C7C53AA298CEF116A38BFDF14C3B938A81869DD9DF56B9DD49C81DFEA9DF72FD6E8BF9BD9083C47B0FD10B7BBF6252C4ADD44C2546FDD53AE7F81FEB57A31AD7CED55F27D55F84992CE5FA11A225CC8378CA14E6B930973261F7AB02EA75B0E26DA37A148C25BC2AEF3F448EDD934423E01EF009380A8D41E3D07AEC6D806AA1CDD07EE814F63BA04EE83C74014AA5F80E239A86D25009FC6C5010EBB249F3FB590C5E03B7827DA00BBC016E0307400DBC0DEE0563E03EF01E78001C029F4209E8393401D5607F237429F37F727DFA4EF97D52333DB0659A7B1387F12C91D8CE7D6EACB19110E67DAC501BF9142ADAB275D8F82E976747BECB1DDA0E8D67C59C179E1CA216518A27699DDFAB5954CEAE7D999C9CAF07ECFE38BEEBF563AFCA13D6FBA1CA98AF13D85F76D69CB52B58BF5BFB52679F8299FA97D6F3666DA985F3F98DF5BC199FCF0F3AFB8B455252A041FF5D46E27F2A644D7B99C475DBC04E4C5F01000063000000000002000101000000000000789C33606060F8B1244320F1A38400338346B708831C230383A0C0B6D5EF2281520C82F50C0E36798FC295661FEF4A2C2ECE3420513D00EE681BC35252A041FF5D46E27F2A644D7B99C4750DC14E4C5F0100006F010000000007000101000000000000789CB3606060E012677048FC2821C0CCA0D12DC2E0C4C8C02028B06DF5BB48A014833883F9C1B74C0C0CCC4036371303182CB8F6C3D102486F12CA17C0A58F9741F72148");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);
            sut.StoreData(data2);

            Assert.AreEqual(101, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }
        [TestMethod]
        public void FFXIVBundle_StoreData_BadMagicPlusOneBundle()
        {
            // changed '52' to '51' in first byte
            byte[] data = ConversionUtility.HexStringToByteArray("5152A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B8E");
            byte[] data2 = ConversionUtility.HexStringToByteArray("5252A041FF5D46E27F2A644D7B99C475047C4E3F5F0100005C000000000001000101000000000000789C33606060D8BF405A40E487AA0033C3FE0A1106574606065586B5E1AF2381520CDDDC20F205F311CE33D3818C070009600B8E");

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);
            sut.StoreData(data2);

            Assert.AreEqual(1, sut.Messages.Count);
            Assert.AreEqual(0, TestInfrastructure.Listener.Messages.Count);
        }

        [TestMethod]
        public void FFXIVBundle_BundleInMultipleIPPaylods()
        {
            // note: did not update
            byte[][] data = new byte[][]
            {
                ConversionUtility.HexStringToByteArray
                ConversionUtility.HexStringToByteArray
                ConversionUtility.HexStringToByteArray
            };

            IPDecoder sut1 = new(
                ConversionUtility.IPStringToUint("124.150.157.52"),
                ConversionUtility.IPStringToUint("192.168.1.136"),
                IPProtocol.TCP);
            TCPDecoder sut2 = new(54993, 61781); // port may be 61781!

            FFXIVBundleDecoder sut3 = new();

            int messageCount = 0;
            for (int i = 0; i < data.Length; i++)
            {
                byte[] ippayload;
                sut1.FilterAndStoreData(data[i], data[i].Length);
                while ((ippayload = sut1.GetNextIPPayload()) != null)
                {
                    byte[] tcppayload;
                    sut2.FilterAndStoreData(ippayload);
                    while ((tcppayload = sut2.GetNextTCPDatagram()) != null)
                    {
                        sut3.StoreData(tcppayload);
                        while (sut3.GetNextFFXIVMessage() != null)
                        {
                            messageCount++;
                        }
                    }
                }
            }

            Assert.AreEqual(351, messageCount);
        }

        /**
         * BUG: if magic0 matches but any of magic 1-3 is not 0, then StoreData will not return
         */
        [TestMethod, Timeout(2000)]
        public void FFXIVBundle_StoreData_NoInfiniteLoopWithFalsePositiveMagic()
        {
            byte[] data = new byte[]
            {
                /*magic0*/
                0x41, 0xa0, 0x52, 0x52,
                /*magic1*/
                0x1, 0x1, 0x1, 0x1,
                /*magic2*/
                0x1, 0x1, 0x1, 0x1, 
                /*magic3*/
                0x1, 0x1, 0x1, 0x1,
                /* Rest of the header */
                0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
            };

            FFXIVBundleDecoder sut = new();
            sut.StoreData(data);
            // Pass if above method returns
        }
    }

}
